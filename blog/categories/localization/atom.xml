<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Localization | Ramón Huidobro]]></title>
  <link href="http://ramonh.github.io/blog/categories/localization/atom.xml" rel="self"/>
  <link href="http://ramonh.github.io/"/>
  <updated>2015-01-10T20:03:32+01:00</updated>
  <id>http://ramonh.github.io/</id>
  <author>
    <name><![CDATA[Ramón Huidobro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Internationalization in RubyMotion Projects - Part 2]]></title>
    <link href="http://ramonh.github.io/blog/2015/01/03/internationalization-in-rubymotion-projects-part-2/"/>
    <updated>2015-01-03T13:32:31+01:00</updated>
    <id>http://ramonh.github.io/blog/2015/01/03/internationalization-in-rubymotion-projects-part-2</id>
    <content type="html"><![CDATA[<p>Over the holidays, I pondered on how I could make these scripts for slurping up localizable strings in RubyMotion projects easier for myself or other developers.</p>

<p>I then came up with the idea to make this a ruby gem! Introducing <a href="https://github.com/incbee/locamotion">LocaMotion</a>.</p>

<p>It currently has two commands: &lsquo;slurp&rsquo; and &lsquo;generate&rsquo;</p>

<p>Let&rsquo;s start with the one you might already be familiar with: calling &lsquo;locamotion generate&rsquo; from the command line will run the script from <a href="blog/2014/12/03/internationalization-in-rubymotion-projects/">last post</a>. That is, it looks at the strings in the English localizable file and copies them into those of the other languages, should these not already contain said string.</p>

<p>The second command is called &lsquo;locamotion slurp&rsquo;. What this does is it looks into the <em>app</em> folder of a RubyMotion project and extracts every localized string in the SugarCube format. That is, for example:</p>

<p>&ldquo;Hello&rdquo;._</p>

<p>Once locamotion finishes gathering up the localizable strings, it looks in the &lsquo;resources/en.lproj/Localizable.strings&rsquo; file, and adds each string if it doesn&rsquo;t exist yet in the localizable file. The script is as follows</p>

<pre><code class="ruby Slurp">matches = []
Dir.glob('app/**/*.rb') do |ruby_file|
  File.open(ruby_file).each do |line|
    matches += line.scan(/"([^"]+)"\._/)
    matches += line.scan(/'([^']+)'\._/)
  end
end
matches.flatten!
FileUtils.mkdir_p('resources/en.lproj') unless File.exist?('resources/en.lproj')
localizable = 'resources/en.lproj/Localizable.strings'
system("touch #{localizable}")
strings_added_count = 0
matches.each do |string|
  unless File.open(localizable).read =~ /"#{Regexp.quote(string)}"\s*=\s*"#{Regexp.quote(string)}";/
  File.open(localizable, 'a+') { |f| f.write("\"#{string}\" = \"#{string}\";\n") }
    added = true
  end
end
</code></pre>

<p>These two commands make setting myself up for localizing the strings in my RubyMotion apps a lot faster.</p>

<p>Creating the LocaMotion gem was also quite the learning experience! But that&rsquo;s for another blog post. &lsquo;Til then!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Internationalization in RubyMotion Projects]]></title>
    <link href="http://ramonh.github.io/blog/2014/12/03/internationalization-in-rubymotion-projects/"/>
    <updated>2014-12-03T12:46:33+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/12/03/internationalization-in-rubymotion-projects</id>
    <content type="html"><![CDATA[<p>It&rsquo;s not all Bachelor Project for me! One of my contract projects at the moment is to write an OS X app using <a href="http://www.rubymotion.com/">RubyMotion</a>.</p>

<p>One of my goals for this project from the get-go was to make localization really simple. Fortunately, this is really nicely implemented in RubyMotion.</p>

<p>The <a href="https://github.com/rubymotion/sugarcube">SugarCube</a> (MIT license) gem from the RubyMotion community has a localization syntax that allows you to declare a string as localized that is just wonderful. Instead of writing the following:</p>

<pre><code class="objective-c Objective-C">NSLocalizedString(@"String", @"Key")
</code></pre>

<p>You can just write the following:</p>

<pre><code class="ruby Ruby">"String"._
</code></pre>

<p>It&rsquo;s that simple. It works wonders for interpolating strings, too. This is how it looks in Objective-C:</p>

<pre><code class="objective-c Objective-C">NSInteger value = 1
NSLocalizedString(NSStringWithFormat(@"String with value: %ld", value), @"Key")
</code></pre>

<p>&hellip;And this is how it is in RubyMotion-Land:</p>

<pre><code class="ruby Ruby">value = 1
"String #{value}"._
</code></pre>

<p>Meanwhile, you&rsquo;re probably wondering where we need to place these localized strings, as well as how RubyMotion knows what language they belong to. This is also quite simple. In your project&rsquo;s folder, you need a <em>resources</em> folder. This is where your localization files will go. For example, for English, you&rsquo;ll need a folder called <em>en.lproj</em>, or for Spanish they&rsquo;ll go in <em>es.lproj</em>. More language codes can be found in the <a href="https://developer.apple.com/library/ios/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html">official Apple Docs</a>.</p>

<p>Finally, you need to create a file in the localized folder called <em>Localizable.strings</em>. In it, each line will be formatted like the following example:</p>

<p><em>&ldquo;Hello&rdquo; = &ldquo;Hola&rdquo;;</em></p>

<p>This is nice and all, but here&rsquo;s where it got a little irritating for me: I didn&rsquo;t want to go and copy each line for each localizable file. I therefore wrote a script! A rake task, to be precise. What this task does is it looks at the strings in the English localizable file and copies them into those of the other languages, should these not already contain said string:</p>

<pre><code class="ruby "Generate Localizable Files"">desc "Generate localizable strings"
task :generate_localizable do
  # Go through each English .strings file
  Dir.glob('resources/en.lproj/*.strings') do |strings_file|
    # Go through the other localized folders
    # except for the English one
    Dir.glob('resources/*.lproj') do |folder|
      next if folder == 'resources/en.lproj'
      # Get each string from the English localized file
      File.open(strings_file).each do |line|
        string_regex = line[/(".*"\s*=\s*".*";)/, 1]
        next unless string_regex
        string = string_regex[/(".*")\s*=/, 1]
        puts string
        localized_strings_file = File.join(folder, File.basename(strings_file))
        # Create the new localized strings file if it doesn't exist,
        # and add the string if its non-localized version is not preset
        system("touch #{localized_strings_file}")
        unless File.open(localized_strings_file).read =~ /#{Regexp.quote(string)}\s*=\s*".*";/
          File.open(localized_strings_file, 'a+') { |f| f.write("#{string} = #{string};\n") }
        end
      end
    end
  end
end
</code></pre>

<p>So, if I have a <em>&ldquo;Hello&rdquo; = &ldquo;Hello&rdquo;;</em> line in the English localizable file that&rsquo;s not present in say the Spanish one, the above script will copy that line to the bottom of the Spanish localizable file.</p>

<p><a href="/blog/2015/01/03/internationalization-in-rubymotion-projects-part-2/">Next up</a>, I&rsquo;ll look into a way of looking at the source RubyMotion code and see if I can skip writing the English localizable strings altogether, but this&rsquo;ll do nicely for now!</p>
]]></content>
  </entry>
  
</feed>
