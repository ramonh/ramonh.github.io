<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ramon Huidobro]]></title>
  <link href="http://ramonh.github.io/atom.xml" rel="self"/>
  <link href="http://ramonh.github.io/"/>
  <updated>2014-11-21T16:04:45+01:00</updated>
  <id>http://ramonh.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coaching at Rails Girls Vienna 2014]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/21/coaching-at-rails-girls-vienna/"/>
    <updated>2014-11-21T12:21:35+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/21/coaching-at-rails-girls-vienna</id>
    <content type="html"><![CDATA[<p>Last weekend, I had my first experience in coaching at a Rails Girls event.</p>

<p>I loved every minute of it.</p>

<p>If you&rsquo;ve ever wanted to try out web programming in a great environment, or help out, <a href="http://railsgirls.com/">what are you waiting for?</a> There are events all over the world!</p>

<!-- more -->


<p><img src="http://ramonh.github.io/images/rg-vie-2014.jpg" title="'Rails Girls Vienna'" >
<em>Many thanks to <a href="https://twitter.com/railsgirls_vie/">@RailsGirls_VIE</a> for the photos!</em></p>

<p>The workshop was venue sponsored by Microsoft. It was a fascinating look into their HQ. There were rumblings of a slide, but we never checked it out!</p>

<p>The way a Rails Girls usually starts is with an Installation Party. <a href="https://twitter.com/althaire">@althaire</a> and I arrived early to help set stuff up, and then the attendies arrived.</p>

<p>We used <a href="http://nitrous.io/">Nitrous</a> for the workshop. If you haven&rsquo;t checked it out before, Nitrous is an online service to run, work on and deploy web apps. It&rsquo;s great because you&rsquo;re working on a remote linux instance. How cool is that!? This meant that the installation party consisted mostly of setting up a Nitrous account and getting to know the IDE (Integrated Development Environment) a little bit.</p>

<p>I took the opportunity to show some of the attendies around the command line interface. This is a section that I feel is often overlooked or even dismissed by people, despite its power. Maybe something to consider for a future post?</p>

<p>On the next day, after introductions and sponsor talks, we got to it! We started with the <a href="http://tryruby.org/">Try Ruby Tutorial</a>. I like it! It&rsquo;s almost like an IRB instance, but it kind of carries you along as you learn Ruby. The later levels get a little oddly difficult, but it&rsquo;s definitely a good way to get started.</p>

<p>After getting our feet wet with Ruby, we dove straight into Rails with Nitrous. The guides come in <a href="http://guides.railsgirls.com/">several languages</a> and are really nice!</p>

<p>After a delicious lunch (I had sushi!) it was time for the lightning talks!</p>

<p><img src="http://ramonh.github.io/images/rg-vie-2014-2.jpg" title="'Rails Girls Vienna'" >
<em><a href="https://twitter.com/althaire">@althaire</a> talking about where to go next after Rails Girls.</em></p>

<p>We started with @althaire talking about where to go next, where she proposed starting a Ruby and Rails learning group in Vienna. I&rsquo;ll be sure to help out with organizing in any way I can.</p>

<p>Next, came <a href="https://twitter.com/alicetragedy">@alicetragedy</a> with a great talk on breaking rules and other things beautifully. Very inspiring stuff!</p>

<p>Next was me! I gave a short talk on the importance of taking a break when stuck in anything, including programming. You can find the slides, complete with silly drawings, <a href="https://speakerdeck.com/ramonh/stuck-take-a-break">here</a>.</p>

<p>After completing the workshop, including some fun with deploying to <a href="https://www.heroku.com/">Heroku</a>, styling with CSS and doing the follow-up tutorials, I&rsquo;d say the workshop was a success!</p>

<p>The best part was finding out that some of the attendees were already making stuff the next day!</p>

<p>I got to meet some people and take a step further into being active in the community.</p>

<p>I can only hope to do it again soon. In fact, I will! I&rsquo;ll be at <a href="http://railsgirls.com/bratislava">Rails Girls Bratislava</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homesick App - Setting Up a CoffeeScript-written Node.js Project]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/10/homesick-app-setting-up-a-coffeescript-written-node-dot-js-project/"/>
    <updated>2014-11-10T13:38:22+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/10/homesick-app-setting-up-a-coffeescript-written-node-dot-js-project</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series of posts about Homesick, <a href="http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick/">my bachelor project</a>.</p>

<p>The server side is hosted <a href="https://github.com/ramonh/homesick-server">here</a>.</p>

<p>This is a great opportunity for me to learn both Node.js and get acquainted with server-side programming.</p>

<p>Having said that, I realize that using Node.js might be overkill for something that could be solved with a more low-level approach, but I want to learn Node.js, simple as that!</p>

<p>In order to install Node, you can either download an installer from their <a href="http://nodejs.org/">website</a> or install it using your favorite package manager. Myself, I used <a href="http://brew.sh/">Homebrew</a> on OS X with the command <em>$ brew install node</em>.</p>

<p>I also opted for writing CoffeeScript because I find it a lot of fun! If you don&rsquo;t know what CoffeeScript is, it&rsquo;s a language that compiles into JavaScript. Be sure to <a href="http://coffeescript.org/">try it out here!</a>. You can use the NPM (Node Package Manager) that comes bundled with Node to install CoffeeScript using the command <em>$ npm install coffee-script</em>.</p>

<p>As a part of my toolchain, I&rsquo;m personally a huge fan of <a href="https://github.com/jimweirich/rake">rake</a> for setting up tasks.</p>

<p>Here&rsquo;s the tasks I have set up at the moment:</p>

<figure class='code'><figcaption><span>RakeFile</span><a href='https://github.com/ramonh/homesick-server/blob/master/Rakefile'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="ss">:coffee</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;CoffeeScript compiled!&#39;</span> <span class="k">if</span> <span class="nb">system</span> <span class="s1">&#39;coffee -c -o js coffee&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:run</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:coffee</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;Starting server&#39;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="s1">&#39;node js/app.js&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Short and sweet. The first tasks just prints &ldquo;CoffeeScript compiled!&rdquo; if the command to compile is successful. The way the <em>coffee</em> command works is it looks at the <em>.coffee</em> files in the coffee folder, and compiles them into the <em>js</em> folder.</p>

<p>What the <em>run</em> task does is it requires the <em>coffee</em> task, that is, it makes sure that the task has been run, and then starts the server with the <em>node</em> command. This takes the compiled <em>app</em> JavaScript file and runs it.</p>

<p>If you&rsquo;d like to get furher into rake, I highly recommend watching the <a href="https://www.youtube.com/watch?v=AFPWDzHWjEY">rake</a> <a href="https://www.youtube.com/watch?v=KaEqZtulOus">talks</a> by rake&rsquo;s creator, the late Jim Weirich. Or really, any talks he gave. They&rsquo;re all wonderful.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PyLadies Vienna's Introduction Workshop to Django]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/08/pyladies-viennas-introduction-workshop-to-django/"/>
    <updated>2014-11-08T22:07:50+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/08/pyladies-viennas-introduction-workshop-to-django</id>
    <content type="html"><![CDATA[<p><img src="http://ramonh.github.io/images/Django-3.jpg" title="'Django Girls'" ></p>

<p><em>(Many thanks to <a href="https://twitter.com/FloorDrees">@FloorDrees</a> for the photos!)</em></p>

<!-- more -->


<p><em>Spoiler alert:</em> It was amazing and I had a wonderful time.</p>

<p>The lovely people at <a href="http://www.meetup.com/PyLadies-Vienna/">PyLadies Vienna</a> organized an introductory workshop to Django. It was open to everyone, so I was happy to join in and give both Python and Django a try.</p>

<p><img src="http://ramonh.github.io/images/Django-2.jpg" title="'Django Girls'" ></p>

<p><em>(The goodies were everywhere!)</em></p>

<p>In it, we used the official <a href="http://tutorial.djangogirls.org/">Django Girls tutorial</a>, which I found great to work with.</p>

<p>When it came to installing Django, I was warned of dragons ahead, but I think I got lucky and came out unharmed. The instructions were clear and easy to understand.</p>

<p>I was especially impressed by the concept of <a href="http://tutorial.djangogirls.org/django_installation/README.html">Virtual Environments</a>. It allows me to work on separate projects, each having their own Python environment. It&rsquo;s awesome!</p>

<p>Did I mention lunch? Because that was a welcome surprise!</p>

<p><img src="http://ramonh.github.io/images/Django-1.jpg" title="'Django Girls'" ></p>

<p><em>(And a yummy one, at that!)</em></p>

<p>Towards the end of the workshop, <a href="https://twitter.com/kermit666/">@kermit666</a> gave a &ldquo;Where to go next&rdquo; talk on the <a href="https://github.com/audreyr/cookiecutter">Cookiecutter utility</a> for templating Django apps, <a href="http://yeoman.io/">Yeoman</a> and other related goodies.</p>

<p>I highly enjoyed this workshop, and I&rsquo;m grateful to the organizers, sponsors and fellow attendees. Count me in for coaching next time!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homesick App - Playing Stored Audio Data on Android]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/07/homesick-app-playing-stored-audio-data-on-android/"/>
    <updated>2014-11-07T09:29:21+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/07/homesick-app-playing-stored-audio-data-on-android</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series of posts about Homesick, <a href="http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick/">my bachelor project</a>.</p>

<p>The Android side of the client is hosted <a href="https://github.com/ramonh/homesick-app">here</a>.</p>

<p>Last post, I set up a button in my app to record and store audio. This time, I&rsquo;ve set up a play button that will play the audio I recorded.</p>

<p>Once again, the official <a href="http://developer.android.com/guide/topics/media/audio-capture.html">API guides from Google</a> were very helpful.</p>

<p>The code is very similar to that of recording audio, from last post:</p>

<figure class='code'><figcaption><span>RecordingActivity.java</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/java/com/ramonh/homesick/RecordingActivity.java'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">startPlaying</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mPlayer</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MediaPlayer</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mPlayer</span><span class="o">.</span><span class="na">setDataSource</span><span class="o">(</span><span class="n">mFileName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mPlayer</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mPlayer</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;prepare() failed&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>First, we instantiate an object of type android.media.MediaPlayer. This object will be in charge of playing audio we&rsquo;ve recorded. In the next line, its data source is set to the audio file at the path we recorded to. This means that the player will play this file.</p>

<p>Finally, it&rsquo;s prepared to start playing and start() is called on it to start playing. Simple!</p>

<p>Pressing the Play button again will stop:</p>

<figure class='code'><figcaption><span>RecordingActivity.java</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/java/com/ramonh/homesick/RecordingActivity.java'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">stopPlaying</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mPlayer</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mPlayer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it! Now I have a simple prototype that records and plays audio on Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homesick App - Recording and Storing Audio on Android]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/05/homesick-app-recording-and-storing-audio-on-android/"/>
    <updated>2014-11-05T16:58:48+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/05/homesick-app-recording-and-storing-audio-on-android</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series of posts about Homesick, <a href="http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick/">my bachelor project</a>.</p>

<p>The Android side of the client is hosted <a href="https://github.com/ramonh/homesick-app">here</a>.</p>

<p>I&rsquo;ve had a small handful of experience in Android development, so I&rsquo;ve drawn up a simple activity with two buttons for the time being:</p>

<!-- more -->


<p><img src="http://ramonh.github.io/images/recording-test.png" title="'Recording Test'" ></p>

<p>Really, truly barebones. :-)</p>

<p>To get going with recording audio, the official <a href="http://developer.android.com/guide/topics/media/audio-capture.html">API guides from Google</a> were very helpful.</p>

<p>First off, I had to add the microphone and storage permissions to the manifest:</p>

<figure class='code'><figcaption><span>AndroidManifest.xml</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/AndroidManifest.xml'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;manifest</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">package=</span><span class="s">&quot;com.ramonh.homesick&quot;</span> <span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- application content --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;uses-permission</span> <span class="na">android:name=</span><span class="s">&quot;android.permission.RECORD_AUDIO&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/manifest&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the activity is initialized, it sets up the destination of the recorded audio file on a local variable:</p>

<figure class='code'><figcaption><span>RecordingActivity.java</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/java/com/ramonh/homesick/RecordingActivity.java'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="nf">RecordingActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mFileName</span> <span class="o">=</span> <span class="n">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">().</span><span class="na">getAbsolutePath</span><span class="o">();</span>
</span><span class='line'>        <span class="n">mFileName</span> <span class="o">+=</span> <span class="s">&quot;/audiorecordtest.3gp&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above gets the location of external storage on the device and then appends the file name. In this case, the example uses &lsquo;audiorecordtest.3gp.&rsquo;</p>

<p>It then hooks up the buttons to the activity and when the record button is pressed, the following is called:</p>

<figure class='code'><figcaption><span>RecordingActivity.java</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/java/com/ramonh/homesick/RecordingActivity.java'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">startRecording</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRecorder</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">MediaRecorder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">setAudioSource</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">AudioSource</span><span class="o">.</span><span class="na">MIC</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">setOutputFormat</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">OutputFormat</span><span class="o">.</span><span class="na">THREE_GPP</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">setOutputFile</span><span class="o">(</span><span class="n">mFileName</span><span class="o">);</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">setAudioEncoder</span><span class="o">(</span><span class="n">MediaRecorder</span><span class="o">.</span><span class="na">AudioEncoder</span><span class="o">.</span><span class="na">AMR_NB</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">mRecorder</span><span class="o">.</span><span class="na">prepare</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">LOG_TAG</span><span class="o">,</span> <span class="s">&quot;prepare() failed&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On line 2, we set our local mRecorder to be a new instance of android.media.MediaRecorder. On line 4, we set the audio source to be the device&rsquo;s microphone. On line 5, we set the format to be 3gp. On line 6, we set the destination to be file path we specified earlier. Then, the Audio Encoder is set. Choices can be found <a href="http://developer.android.com/reference/android/media/MediaRecorder.AudioEncoder.html">here</a>.</p>

<p>Finally, we call prepare() on it to finalize the recorder object&rsquo;s settings. Once that succeeds, we call start() to begin the recording process.</p>

<p>Stopping is a much simpler process:</p>

<figure class='code'><figcaption><span>RecordingActivity.java</span><a href='https://github.com/ramonh/homesick-app/blob/master/app/src/main/java/com/ramonh/homesick/RecordingActivity.java'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">stopRecording</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mRecorder</span><span class="o">.</span><span class="na">release</span><span class="o">();</span>
</span><span class='line'>    <span class="n">mRecorder</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! With this all set up, the app can record audio and store it in the 3gp file format on the device&rsquo;s external storage.</p>

<p>Next up, that play button&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Homesick App - Install Plugins in Android Studio]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/04/homesick-app-starting-the-android-client/"/>
    <updated>2014-11-04T16:50:54+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/04/homesick-app-starting-the-android-client</id>
    <content type="html"><![CDATA[<p>This is part of an ongoing series of posts about Homesick, <a href="http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick/">my bachelor project</a>.</p>

<p>Perhaps prematurely, I&rsquo;ve started first with the Android client of the Homesick project.</p>

<p>The Android side of the client is hosted <a href="https://github.com/ramonh/homesick-app">here</a>.</p>

<p>I&rsquo;ll be using Android Studio to develop the client. This is also my first experience with an IntelliJ-like environment, so it should be very interesting!</p>

<p>I was very happy to see I could install plugins. To do so, I did the following:</p>

<ol>
<li>Open Preferences (On OS X, it&rsquo;s in the &ldquo;Android Studio&rdquo; menu)</li>
<li>On the left side, under IDE Settings, select &ldquo;plugins&rdquo;</li>
<li>Click on &ldquo;Install JetBrains plugins&rdquo;</li>
</ol>


<p>One plugin I immediately downloaded was IdeaVim, which lets me use Vim keys in Android Studio.</p>

<p>Once I&rsquo;ve done that and set the Darcula theme with some tweaks, I was all set to start!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting Out With Homesick]]></title>
    <link href="http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick/"/>
    <updated>2014-11-02T11:44:48+01:00</updated>
    <id>http://ramonh.github.io/blog/2014/11/02/starting-out-with-homesick</id>
    <content type="html"><![CDATA[<p>My Bachelor project is called &ldquo;Homesick App&rdquo;, the description being as follows:</p>

<blockquote><p>Develop a mobile app that exchange the sounds created by the city you live in with the sounds of your home city. Requires implementing a server for sound upload and categorization (to be done by the app automatically in the background, classification e.g. into &ldquo;traffic&rdquo;, &ldquo;market&rdquo;, etc.) and of a feature-based classification app that is able to understand the current sound environment and to replace it (over earphones) with cached sounds from the place that you chose on installing the app. An example: The app should help to make someone from Mumbai feel at home in Zurich. Requires good knowledge in audio signal processing.</p></blockquote>

<p>For my part, I&rsquo;ll need to have a basic server that receives recorded sound from an Android client, also developed by me, classifies it by machine learning and then sends back an appropriate sound. Doesn&rsquo;t have to be the equivalent.</p>

<p>Over the next few blog posts, I&rsquo;ll try to document how I develop the application.</p>

<p>Current plan is as follows:</p>

<ul>
<li>Android client will be developed in <a href="https://developer.android.com/sdk/installing/studio.html">Android Studio</a> (trying it for the first time).</li>
<li>Server side code will be a <a href="http://nodejs.org/">Node.js</a> app.</li>
</ul>

]]></content>
  </entry>
  
</feed>
